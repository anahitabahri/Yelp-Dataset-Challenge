data_911 <- read.csv("911_data_final.csv")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rgdal)
library(scales)
library(ggthemes)
unique(data_911$EventName)
library(sqldf)
sqldf("select count(distinct event_id) from data_911 where EventName == 'POISONING / OVERDOSE'")
sqldf("select count(distinct EventID) from data_911 where EventName == 'POISONING / OVERDOSE'")
sqldf("select count(distinct EventID) from data_911 where EventName == 'DIFFICULTY BREATHING'")
data_911 <- read.csv("data_911.csv")
unique(data_911$EventName)
data_911 <- data_911 %>% mutate(eventindex = ifelse(EventName=="Request EMS Response", 1,
ifelse(EventName=="POISONING / OVERDOSE", 2,
ifelse(EventName=="INVESTIGATE ODOR", 3,
ifelse(EventName=="DIFFICULTY BREATHING", 4,
ifelse(EventName=="PT REFUSING TREATMENT AND/OR TRANSPORT", 5,
ifelse(EventName=="MEDICAL INCIDENT", 6,
ifelse(EventName=="EMOTIONALLY DISTURBED PERSON", 7, 8))))))))
data_911 <- data_911 %>%
mutate(extremday=1*(min_wind_chill<=0))
data_911$extremday[data_911$min_wind_chill<=-22] <- 2
write.csv(data_911, "911.csv")
data_911 <- read.csv("911.csv")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rgdal)
library(scales)
library(ggthemes)
library(leaflet)
m=leaflet() %>% addTiles() %>% setView( lng = -71.073689, lat = 42.333539,  zoom = 10 ) %>% addTiles()
m
pal <- colorFactor(c("navy", "red"), domain = c("0", "1"))
data_911_ij <- subset(data_911, eventindex=="1" & extremday=="0") #for shinny, i=c(1:11), j=c(0,1,2)
colnames(data_911_ij)
pm <- leaflet(data = data_911_ij) %>% addTiles() %>% #addProviderTiles("CartoDB.Positron") %>% # Stamen.Toner/CartoDB.Positron
setView( lng = -71.073689, lat = 42.333539,  zoom = 11 )  %>%
addCircles(~-71.073689, ~42.333539, radius=380,
color="grey", stroke = TRUE, fillOpacity = 0.3) %>%
addCircles(~Longitude, ~Latitude, radius = ~ifelse(within.25 == "0", 30, 30),
color = ~pal(within.25), stroke = FALSE, fillOpacity = 0.5)
pm
library(shiny)
library(leaflet)
require(leaflet)
data_911 <- read.csv("911.csv")
data_911 <- read.csv("911.csv")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rgdal)
library(scales)
library(ggthemes)
boston_map <- get_map(location = "Mass Ave/Albany st.", zoom = 12)
colnames(data_911)
ggmap(boston_map, extent = "device") + geom_density2d(data = data_911, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = data_911,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE) # + ggtitle("Density Plot of 911 Data in Boston")
ggmap(boston_map, extent = "device") + geom_density2d(data = data_911, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = data_911,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE) + facet_wrap(~extremday)
pwm <- subset(data_911, extremday=0)
ggmap(boston_map, extent = "device") + geom_density2d(data = pwm, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = pwm,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE) + ggtitle("Moderate Weather")
pwc <- subset(data_911, extremday=1)
ggmap(boston_map, extent = "device") + geom_density2d(data = pwc, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = pwc,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE) + ggtitle("Extreme Cold")
pwh <- subset(data_911, extremday=2)
ggmap(boston_map, extent = "device") + geom_density2d(data = pwh, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = pwh,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE) + ggtitle("Extreme Hot")
ggmap(boston_map, extent = "device") + geom_density2d(data = data_911, aes(x = Longitude, y = Latitude), size = 0.3) +
stat_density2d(data = data_911,
aes(x = Longitude, y = Latitude, fill = ..level.., alpha = ..level..), size = 0.01,
bins = 16, geom = "polygon") + scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0, 0.3), guide = FALSE) + facet_wrap(~extremday)
library(shiny)
library(leaflet)
require(leaflet)
data_911 <- read.csv("911.csv")
colnames(data_911)
runApp('shiny-911.R')
setwd("~/Documents/MSSP/FA2016/App Mult Reg + MV Methods/Final Project/Yelp-Dataset-Challenge")
library(shiny)
library(leaflet)
library(readr)
data <- read_csv("../yelp-data/new_data/final_data/manip_data.csv")
ui <- fluidPage(
selectInput("rt", "Rating:",
c("1" = "1", "2" = "2",
"3" = "3","4" = "4",
"5" = "5")),
selectInput("bg", "Map Types:",
c("Positron" = "CartoDB.Positron",
"Open Street Map" = "OpenStreetMap")),
sliderInput(inputId = "ds",
"Dot size", min=10, max=60, value=10, step=1),
leafletOutput(outputId="map")
)
data <- data.frame(data)
ui <- fluidPage(
selectInput("rt", "Rating:",
c("1" = "1", "2" = "2",
"3" = "3","4" = "4",
"5" = "5")),
selectInput("bg", "Map Types:",
c("Positron" = "CartoDB.Positron",
"Open Street Map" = "OpenStreetMap")),
sliderInput(inputId = "ds",
"Dot size", min=10, max=60, value=10, step=1),
leafletOutput(outputId="map")
)
colnames(data)
ui <- fluidPage(
selectInput("rt", "Rating:",
c("1" = "1", "2" = "2",
"3" = "3","4" = "4",
"5" = "5")),
selectInput("bg", "Map Types:",
c("Positron" = "CartoDB.Positron",
"Open Street Map" = "OpenStreetMap")),
sliderInput(inputId = "ds",
"Dot size", min=10, max=60, value=10, step=1),
leafletOutput(outputId="map")
)
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>% addProviderTiles(input$bg) %>%
addCircles(~Longitude, ~Latitude, input$ds, input$ds),
color = ~"#37c5ac", stroke = FALSE, fillOpacity = 0.5)
})
}
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>% addProviderTiles(input$bg) %>%
addCircles(~longitude, ~latitude, input$ds, input$ds),
color = ~pal(within.25), stroke = FALSE, fillOpacity = 0.5)
})
}
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>% addProviderTiles(input$bg) %>%
addCircles(~longitude, ~latitude, color = ~pal(within.25), stroke = FALSE, fillOpacity = 0.5)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>% addProviderTiles(input$bg) %>%
addCircles(~longitude, ~latitude, color = ~"#37c5ac", stroke = FALSE, fillOpacity = 0.5)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("rt", "Rating:",
c("5" = "5", "4" = "4",
"3" = "3","2" = "2",
"1" = "1")),
sliderInput(inputId = "ds",
"Dot size", min=10, max=60, value=10, step=1),
leafletOutput(outputId="map")
)
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~longitude, ~latitude, weight = 3, radius=40, color = "#ffa500", stroke = TRUE, fillOpacity = 0.8)
})
}
shinyApp(ui = ui, server = server)
colnames(data)
unique(data$state)
library(sqldf)
sqldf("select city from data where state = 'EDH' limit 5")
sqldf("select distinct city from data where state = 'MLN' limit 5")
sqldf("select distinct city from data where state = 'KHL' limit 5")
sqldf("select distinct city from data where state = 'ELN' limit 5")
sqldf("select distinct city from data where state = 'FIF' limit 5")
sqldf("select distinct city from data where state = 'RP' limit 5")
data <- data %>% filter(!state %in% c('EDH','MLN','KHL','ELN','FIF','RP'))
data <- data %>% filter(!data$state %in% c('EDH','MLN','KHL','ELN','FIF','RP'))
data <- read_csv("../yelp-data/new_data/final_data/manip_data.csv")
library(dplyr)
data <- data.frame(data)
data <- data %>% filter(!state %in% c('EDH','MLN','KHL','ELN','FIF','RP'))
ui <- fluidPage(
selectInput("rt", "Rating:",
c("5" = "5", "4" = "4",
"3" = "3","2" = "2",
"1" = "1")),
sliderInput(inputId = "ds",
"Dot size", min=10, max=60, value=10, step=1),
leafletOutput(outputId="map")
)
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~longitude, ~latitude, weight = 3, radius=40, color = "#ffa500", stroke = TRUE, fillOpacity = 0.8)
})
}
shinyApp(ui = ui, server = server)
unique(data$state)
sqldf("select distinct city from data where state = 'PA'")
sqldf("select state from data where city like '%Karlsruhe%")
sqldf("select state from data where city like '%Karlsruhe%'")
data <- read_csv("../yelp-data/new_data/final_data/manip_data.csv")
data <- data.frame(data)
data <- data %>% filter(!state %in% c('EDH','MLN','KHL','ELN','FIF','RP','BW'))
ui <- fluidPage(
selectInput("rt", "Rating:",
c("5" = "5", "4" = "4",
"3" = "3","2" = "2",
"1" = "1")),
sliderInput(inputId = "ds",
"Dot size", min=10, max=60, value=40, step=1),
leafletOutput(outputId="map")
)
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addCircles(~longitude, ~latitude, weight = 3, radius=40, color = "#ffa500", stroke = TRUE, fillOpacity = 0.8)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("rt", "Rating:",
c("5" = "5", "4" = "4",
"3" = "3","2" = "2",
"1" = "1")),
sliderInput(inputId = "ds",
"Dot size", min=10, max=60, value=35, step=1),
leafletOutput(outputId="map")
)
server <- function(input, output) {
output$map <- renderLeaflet({
leaflet(data = subset(data, ReviewStars==input$rt)) %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(-100.044345, 41.314352, zoom = 4) %>%
addCircles(~longitude, ~latitude, weight = 3, radius=40, color = "#ffa500", stroke = TRUE, fillOpacity = 0.8)
})
}
shinyApp(ui = ui, server = server)
