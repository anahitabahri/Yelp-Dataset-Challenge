infludenza2.is.data.frame()
chisq.test(infludenza2)
fisher.test(infludenza2)
chisq.test(table(infludenza2))
Desc(infludenza2)
install.packages('desc')
library(desc)
Desc(infludenza2)
plot(infludenza2)
infludenza2.is.table()
is.table(infludenza2)
is.data.frame(infludenza2)
infludenza2 <- as.table(infludenza2)
is.table(infludenza)
is.data.frame(infludenza)
infludenza2
lapply(infludenza2[, c("treatment", "large", "moderate","small")], table)
ftable(xtabs(~ treatment + large + moderate + small, data = infludenza2))
infludenza2
is.table(infludenza2)
ftable(infludenza2)
library(gmodels)
CrossTable(infludenza2,prop.t=FALSE,prop.r=FALSE,prop.c=FALSE)
infludenza2
TreatmentSize <- margin.table(infludenza2, c(1, 2))
knitr::opts_chunk$set(echo = TRUE,out.width="0.9\\linewidth",dev="png",fig.align  = 'center')
library(ggplot2)
library(knitr)
library(arm)
library(data.table)
library(foreign)
library(car)
library(stringr)
library(rstan)
library(zoo)
# Read in the data from an excel-format ".csv" file
hiv.data.raw <- fread ("http://www.stat.columbia.edu/~gelman/arm/examples/cd4/allvar.csv")
invisible(hiv.data.raw[,ok := !is.na(CD4PCT) ])
hiv.data<-hiv.data.raw[ok==TRUE]
invisible(hiv.data[,y :=sqrt (CD4PCT)])
# kid's age (yrs) at the beginning of the study
invisible(hiv.data[,age.baseline := baseage ]  )
# kids age (yrs) at the time of measurement
invisible(hiv.data[,age.measurement := visage ] )
invisible(hiv.data[,time := visage - baseage ] )
setnames(hiv.data,"treatmnt","treatment")
knitr::opts_chunk$set(echo = TRUE,out.width="0.9\\linewidth",dev="png",fig.align  = 'center')
library(ggplot2)
library(knitr)
library(arm)
library(data.table)
library(foreign)
library(car)
library(stringr)
library(rstan)
library(zoo)
# Read in the data from an excel-format ".csv" file
hiv.data.raw <- fread ("http://www.stat.columbia.edu/~gelman/arm/examples/cd4/allvar.csv")
invisible(hiv.data.raw[,ok := !is.na(CD4PCT) ])
hiv.data<-hiv.data.raw[ok==TRUE]
invisible(hiv.data[,y :=sqrt (CD4PCT)])
# kid's age (yrs) at the beginning of the study
invisible(hiv.data[,age.baseline := baseage ]  )
# kids age (yrs) at the time of measurement
invisible(hiv.data[,age.measurement := visage ] )
invisible(hiv.data[,time := visage - baseage ] )
setnames(hiv.data,"treatmnt","treatment")
head(hiv.data)
model <- lmer(y ~ time + (1|newpid),data=hiv.data)
model1 <- lmer(y ~ time + treatment + age.baseline + (1|newpid),data=hiv.data)
length((subset$`COB SAM Full Address`)) # lots of full addresses. 11,672
library(RPostgreSQL)
host <- "analyticsga-east2.c20gkj5cvu3l.us-east-1.rds.amazonaws.com"
port <- "5432"
username <- "analytics_student"
password <- "analyticsga"
## Use the name of the specific database you will access
dbname <- "iowa_liquor_sales_database"
## Specify the PostreSQL driver
drv <- dbDriver("PostgreSQL")
## Now establish the connection
con <- dbConnect(drv, user = username, password = password,
dbname = dbname, port = port, host = host)
tail(r3) # lots of NAs. Let's remove those. First let's create a df with case_cost
case_cost <- dbGetQuery(con, statement = paste("SELECT cast(case_cost AS NUMERIC)
FROM products"))
class(products$case_cost) # numeric!
library(dplyr)
case_cost <- case_cost %>% filter(case_cost!='NA') %>% arrange(case_cost)
hist(case_cost$case_cost) # doesn't look good . . . let's manipulate this using ggplot2
# before that, let's look at summary stats
min(case_cost$case_cost) # 0, as expected. should we even have these 0s? well, since there aren't many, we can keep them.
max(case_cost$case_cost) # 7049.7
mean(case_cost$case_cost) # 111.4349
median(case_cost$case_cost) # 83
library(ggplot2)
# create a ggplot object
case_cost_gp <- ggplot(case_cost)
tail(case_cost$case_cost) # let's have 3000 as limit. we don't need last 3 for now.
case_cost_gp + aes(x=case_cost)+
geom_histogram() +
ggtitle("Histogram of Case Cost") +
labs(x="Case Cost",y="Frequency")
# doesn't really tell a good story. let's zoom into 0 - 1000 area
case_cost_gp + aes(x=case_cost)+
geom_histogram() +
ggtitle("Histogram of Case Cost") +
labs(x="Case Cost",y="Frequency") +
scale_x_continuous(limits = c(0,1000))
# let's go down even more. perhaps to 300
case_cost_gp + aes(x=case_cost)+
geom_histogram() +
ggtitle("Histogram of Case Cost") +
labs(x="Case Cost",y="Frequency") +
scale_x_continuous(limits = c(0,300))
# peak is just over 50
# confirm by getting mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(case_cost$case_cost) # 60!
products_1 <- dbGetQuery(con, statement = paste("SELECT category_name, cast(pack as numeric), cast(proof as numeric), cast(case_cost as numeric), cast(bottle_size as numeric)
FROM products"))
products_1 <- products_1 %>% filter(case_cost!='NA') %>% arrange(case_cost)
products_1_gp <- ggplot(products_1)
products_1_gp +
aes(x=proof, y=case_cost)+
geom_point()+
ggtitle("Relationship between proof and case cost") +
labs(x="Proof",y="Case Cost")
products_1_gp +
aes(x=bottle_size, y=case_cost)+
geom_point()+
ggtitle("Relationship between bottle size and case cost") +
labs(x="Bottle Size",y="Case Cost")
min(products_1$bottle_size)
max(products_1$bottle_size)
mean(products_1$bottle_size)
median(products_1$bottle_size)
products_1_gp +
aes(x=bottle_size, y=case_cost)+
geom_point()+
ggtitle("Relationship between bottle size and case cost") +
labs(x="Bottle Size",y="Case Cost") +
scale_x_continuous(limits = c(0,1000))
products_1_gp +
aes(x=pack, y=case_cost)+
geom_point()+
ggtitle("Relationship between pack and case cost") +
labs(x="Pack",y="Case Cost")
ppois(15:20,10)
1-ppois(15:20,10)
qf(.5, df1=12,df2=6)
qf(.05, df1=12,df2=6)
qf(.05, df1=6,df2=12)
qf(.95,df1=12,df2=6)
knitr::opts_chunk$set(echo = TRUE,out.width="0.9\\linewidth",dev="png",fig.align  = 'center')
library(ggplot2)
library(knitr)
library(arm)
library(data.table)
library(foreign)
library(car)
library(stringr)
library(rstan)
library(zoo)
library(dplyr)
library(tidyr)
library(sqldf)
# Read in the data from an excel-format ".csv" file
hiv.data.raw <- fread ("http://www.stat.columbia.edu/~gelman/arm/examples/cd4/allvar.csv")
invisible(hiv.data.raw[,ok := !is.na(CD4PCT) ])
hiv.data<-hiv.data.raw[ok==TRUE]
invisible(hiv.data[,y :=sqrt (CD4PCT)])
# kid's age (yrs) at the beginning of the study
invisible(hiv.data[,age.baseline := baseage ]  )
# kids age (yrs) at the time of measurement
invisible(hiv.data[,age.measurement := visage ] )
invisible(hiv.data[,time := visage - baseage ] )
setnames(hiv.data,"treatmnt","treatment")
fitted_model = hiv.data %>% group_by(newpid) %>% do(model = lm(y ~ time, data = hiv.data))
head(hiv.data)
head(hiv.data.raw)
qf(.95,df1=5,df2=20)
qf(.95,5,20)
1-qf(.05,20,5)
set.seed(3)
grp.1 <- round(rlnorm(100,6)) # with widget
grp.2 <- round(rlnorm(100,6)) # original page
hist(grp.1)
hist(grp.2)
data <- c(grp.1,grp.2)
l1 <- length(grp.1)
l2 <- length(grp.2)
lt <- l1+l2
test.diff <- mean(grp.1) - mean(grp.2)
it <- function(n){
M = NULL
for(i in 1:n){
s = sample(data, lt, FALSE)
m1 = mean(s[1:l1]) - mean(s[(l1+1):lt])
M = c(M,m1)
}
return(M)
}
examples <- it(10000)
par(mfrow=c(1,1))
hist(examples, col = "red", breaks = 100, main="Random Permutations", xlab="")
abline(v = test.diff, col = "black", lwd = 4)
(sum(examples<test.diff))/(10000)
length(examples[examples<test.diff])/10000
set.seed(3)
grp.1 <- round(rlnorm(100, 6)) # With Widget
grp.2 <- round(rlnorm(100, 6)) # Original page
hist(grp.1)
hist(grp.2)
data <- c(grp.1, grp.2)
l1 <- length(grp.1)
l2 <- length(grp.2)
lt <- l1+l2
test.diff <- median(grp.1) - median(grp.2)
it <- function(n){
M = NULL
for(i in 1:n){
s = sample(data, lt, FALSE)
m1 = mean(s[1:l1]) - mean(s[(l1+1):lt])
M = c(M,m1)
}
return(M)
}
set.seed(3)
grp.1 <- round(rlnorm(100, 6)) # With Widget
grp.2 <- round(rlnorm(100, 6)) # Original page
hist(grp.1)
hist(grp.2)
data <- c(grp.1, grp.2)
l1 <- length(grp.1)
l2 <- length(grp.2)
lt <- l1+l2
test.diff <- median(grp.1) - median(grp.2)
it <- function(n){
M = NULL
for(i in 1:n){
s = sample(data, lt, FALSE)
m1 = median(s[1:l1]) - median(s[(l1+1):lt])
M = c(M,m1)
}
return(M)
}
examples <- it(10000)
par(mfrow=c(1,1))
hist(examples, col = "red", breaks = 100, main="Random Permutations", xlab="")
abline(v = test.diff, col = "black", lwd = 4)
set.seed(3)
grp.1 <- round(rlnorm(100, 6)) # With Widget
grp.2 <- round(rlnorm(100, 6)) # Original page
hist(grp.1)
hist(grp.2)
data <- c(grp.1, grp.2)
l1 <- length(grp.1)
l2 <- length(grp.2)
lt <- l1+l2
test.diff <- median(grp.1) - median(grp.2)
it <- function(n){
M = NULL
for(i in 1:n){
s = sample(data, lt, FALSE)
m1 = median(s[1:l1]) - median(s[(l1+1):lt])
M = c(M,m1)
}
return(M)
}
examples <- it(10000)
par(mfrow=c(1,1))
hist(examples, col = "red", breaks = 100, main="Random Permutations", xlab="")
abline(v = test.diff, col = "black", lwd = 4)
abline(v=quantile(examples,0.025), color="white")
abline(v=quantile(examples,0.025), color="yellow")
abline(v=quantile(examples,0.025), col="yellow")
abline(v=quantile(examples,0.025), col="lightblue")
abline(v=quantile(examples,0.025), col="black")
abline(v=quantile(examples,0.025), col="blue")
abline(v=quantile(examples,0.975), col="blue")
library(arm)
0.3/4
invlogit(-0.2+0.3*0.5)
?confint
confint(140, level=0.95)
conf_int_mag <- c(140 - 2*11, 140 + 2*11)
conf_int_mag
conf_int_mag <- c(140 - 2.575*11, 140 + 2.575*11)
conf_int_mag
invlogit(-0.2)
(0.45/0.55)/(0.55/0.45)
exp(-0.2)
exp(-0.1)
exp(0.1)
exp(0.2)
exp(0.3)
(0.45/0.55)
(0.55/0.45)
78 + 76 + 20 + 16
50 + 78 + 11
190 + 139
357 - 329
plot(cars)
devtools::install_github('rweyant/spotifyr')
library(spotifyr)
set_credentials(client_id='a3d8a0232c8742779cfe4ac9f0365d74',client_secret='887cf57aedfa44abb0de94feb94d0a84')
client_tokens <- get_tokens()
get_artist('5me0Irg2ANcsgc93uaYrpb')
biggie <- get_artist('5me0Irg2ANcsgc93uaYrpb')
biggie
biggie <- as.data.frame(biggie)
get_artist('1ZwdS5xdxEREPySFridCfh')
simplify_result(get_artist_relatedartists('5me0Irg2ANcsgc93uaYrpb'),type='artists')
simplify_result(get_artist_relatedartists('1ZwdS5xdxEREPySFridCfh'),type='artists')
get_artist_toptracks('5me0Irg2ANcsgc93uaYrpb','US')
get_artist_toptracks('5me0Irg2ANcsgc93uaYrpb','US')
biggie_top_songs <- as.data.frame(biggie_top_songs)
biggie_top_songs <- get_artist_toptracks('5me0Irg2ANcsgc93uaYrpb','US')
biggie_top_songs <- as.data.frame(biggie_top_songs)
View(biggie_top_songs)
biggie_top_songs <- get_artist_toptracks('5me0Irg2ANcsgc93uaYrpb','US')
biggie_top_songs
library(data.table)
rbindlist(biggie_top_songs, fill=TRUE)
biggie_top_songs
library(dplyr)
dfs <- lapply(biggie_top_songs, data.frame, stringsAsFactors = FALSE)
rbind_all(dfs)
bind_rows(dfs)
View(dfs)
df <- do.call(rbind, lapply(biggie_top_songs, as.data.frame.list, stringsAsFactors = FALSE))
p_hat = 172 / 420019
cloud = read.table('data/cloud/clouds.dat',header=T) # read file
cloud <- data.frame(cloud) # convert to df
library(tidyr)
cloud <- cloud %>% gather(Cloud, Rainfall, 1:2)
View(cloud)
sim = function(i){
Cloud = sample(seq(1,52), replace = T)
diff = mean(cloud$Rainfall[Cloud[Cloud>26]]) - mean(cloud$Rainfall[Cloud[Cloud<=26]])
return(diff)
}
bt = sapply(seq(1,2000), function(i) sim() )
p = sum( (bt>0 ) *1) / length(bt)
p
santa_fe = read.csv('data/sante-fe-houses.csv',header=T)
santa_fe <- data.frame(santa_fe) # convert to df
qqnorm(santa_fe$prices.2000)
qqnorm(santa_fe$prices.2001)
?qqnorm
qqnorm(santa_fe$prices.2000);qqline(santa_fe$prices.2000)
qqnorm(santa_fe$prices.2000);qqline(santa_fe$prices.2000)
qqnorm(santa_fe$prices.2001);qqline(santa_fe$prices.2001)
qqnorm(santa_fe);qqline(santa_fe)
hist(santa_fe$prices.2000)
hist(santa_fe$prices.2000)
qqnorm(santa_fe$prices.2000);qqline(santa_fe$prices.2000)
qqnorm(santa_fe$prices.2000);qqline(santa_fe$prices.2000)
hist(santa_fe$prices.2001)
qqnorm(santa_fe$prices.2000);qqline(santa_fe$prices.2000)
hist(santa_fe$prices.2001)
?t.test
setwd("~/Documents/MSSP/FA2016/App Mult Reg + MV Methods/Final Project/Yelp-Dataset-Challenge/challenge-notebooks")
library(tidyr)
library(dplyr)
library(readr)
library(arm)
library(lme4)
library(merTools)
library(aod)
library(ggplot2)
library(Rcpp)
data <- read_csv('../../yelp_data.csv')
data <- data.frame(data)
data = data %>% mutate(experience2 = ifelse(experience == 'True', 1, 0))
mylogit <- glm(experience2 ~ votes_useful + ReviewStars,
data = data, family = "binomial")
class(data$ReviewStars)
data$ReviewStars = as.factor(data$ReviewStars)
newdata1 <- with(data,
data.frame(votes_useful = mean(votes_useful),
ReviewStars = factor(1:5)))
newdata1$P <- predict(mylogit, newdata = newdata1, type = "response")
data <- read_csv('../../yelp_data.csv')
data <- data.frame(data)
data = data %>% mutate(experience2 = ifelse(experience == 'True', 1, 0))
mylogit <- glm(experience2 ~ votes_useful + ReviewStars,
data = data, family = "binomial")
newdata1 <- with(data,
data.frame(votes_useful = mean(votes_useful),
ReviewStars = ReviewStars))
newdata1$P <- predict(mylogit, newdata = newdata1, type = "response")
newdata1
summary(data$votes_useful)
newdata2 <- with(data,
data.frame(votes_useful = rep(seq(from = 1, to = 160, length.out = 40), 4),
ReviewStars = (rep(1:5, each = 100))))
newdata2 <- with(data,
data.frame(votes_useful = rep(seq(from = 0, to = 160, length.out = 40), 4),
ReviewStars = (rep(1:5, each = 100))))
newdata2 <- with(data,
data.frame(votes_useful = rep(seq(from = 0, to = 160), 4),
ReviewStars = (rep(1:5, each = 100))))
newdata2 <- with(data,
data.frame(votes_useful = rep(seq(from = 0, to = 160), 4),
ReviewStars = (rep(1:5))))
loghistplot  <- function(data) {
require(ggplot2); require(gridExtra) # load packages
names(data) <- c('x','y') # rename columns
# get min and max axis values
min_x <- min(data$x)
max_x <- max(data$x)
min_y <- min(data$y)
max_y <- max(data$y)
# get bin numbers
bin_no <- max(hist(data$x)$counts) + 5
# create plots
a <- ggplot(data, aes(x = x, y = y)) +
theme_bw(base_size=16) +
geom_smooth(method = "glm", family = "binomial", se = TRUE,
colour='black', size=1.5, alpha = 0.3) +
#     scale_y_continuous(limits=c(0,1), breaks=c(0,1)) +
scale_x_continuous(limits=c(min_x,max_x)) +
opts(panel.grid.major = theme_blank(),
panel.grid.minor=theme_blank(),
panel.background = theme_blank()) +
labs(y = "Probability\n", x = "\nYour X Variable")
b <- ggplot(data[data$y == unique(data$y)[1], ], aes(x = x)) +
theme_bw(base_size=16) +
geom_histogram(fill = "grey") +
scale_y_continuous(limits=c(0,bin_no)) +
scale_x_continuous(limits=c(min_x,max_x)) +
opts(panel.grid.major = theme_blank(),
panel.grid.minor=theme_blank(),
axis.text.y = theme_blank(),
axis.text.x = theme_blank(),
axis.ticks = theme_blank(),
panel.border = theme_blank(),
panel.background = theme_blank()) +
labs(y='\n', x='\n')
c <- ggplot(data[data$y == unique(data$y)[2], ], aes(x = x)) +
theme_bw(base_size=16) +
geom_histogram(fill = "grey") +
scale_y_continuous(trans='reverse') +
scale_y_continuous(trans='reverse', limits=c(bin_no,0)) +
scale_x_continuous(limits=c(min_x,max_x)) +
opts(panel.grid.major = theme_blank(),panel.grid.minor=theme_blank(),
axis.text.y = theme_blank(), axis.text.x = theme_blank(),
axis.ticks = theme_blank(),
panel.border = theme_blank(),
panel.background = theme_blank()) +
labs(y='\n', x='\n')
grid.newpage()
pushViewport(viewport(layout = grid.layout(1,1)))
vpa_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5)
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5)
vpc_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5)
print(b, vp = vpb_)
print(c, vp = vpc_)
print(a, vp = vpa_)
}
logpointplot  <- function(data) {
require(ggplot2); require(gridExtra) # load packages
names(data) <- c('x','y') # rename columns
# get min and max axis values
min_x <- min(data$x)
max_x <- max(data$x)
min_y <- min(data$y)
max_y <- max(data$y)
# create plots
ggplot(data, aes(x = x, y = y)) +
theme_bw(base_size=16) +
geom_point(alpha = 0.5, position = position_jitter(w=0, h=0.02)) +
geom_smooth(method = "glm", family = "binomial", se = TRUE,
colour='black', size=1.5, alpha = 0.3) +
scale_x_continuous(limits=c(min_x,max_x)) +
opts(panel.grid.major = theme_blank(),
panel.grid.minor=theme_blank(),
panel.background = theme_blank()) +
labs(y = "Probability\n", x = "\nYour X Variable")
}
loghistplot(data[,c("votes_useful","experience2")])
loghistplot(data[,c("votes_useful","experience2")])
logpointplot(data[,c("votes_useful","experience2")])
library(popbio)
install.packages("popbio")
library(popbio)
logi.hist.plot(data$votes_usefl,data$experience2,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(data$votes_useful,data$experience2,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(data$votes_useful,data$experience2,boxp=FALSE,
type="hist",counts=TRUE,col="gray")
logi.hist.plot(data$votes_useful,data$experience2,boxp=FALSE,
type="hist",col="gray")
logi.hist.plot(data$ReviewStars,data$experience2,boxp=FALSE,
type="hist",col="gray")
logi.hist.plot(data$votes_funny,data$experience2,boxp=FALSE,
type="hist",col="gray")
columns(data)
colnames(data)
logi.hist.plot(data$votes_cool,data$experience2,boxp=FALSE,
type="hist",col="gray")
data = data %>% mutate(num_words = nchar(data$text))
logi.hist.plot(data$num_words,data$experience2,boxp=FALSE,
type="hist",col="gray")
logi.hist.plot(data$num_words,data$rating1,boxp=FALSE,
type="hist",col="gray")
logi.hist.plot(data$num_words,data$rating5,boxp=FALSE,
type="hist",col="gray")
